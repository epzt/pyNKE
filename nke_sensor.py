# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pyNKE
                                 A QGIS plugin
 This plugin manage data fo an NKE sensor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Emmanuel Poizot
        email                : emmanuel.poizot@lecnam.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .nke_sensor_dialog import pyNKEDialog
import os.path
import pysftp
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
from stat import ST_CTIME

SENSORNAME = ["Pressure",
              "Temperature",
              "Chlorophyll_a",
              "pH",
              "Turbidity",
              "Oxygen_Concentration",
              "Oxygen_Saturation",
              "Oxygen_Temperature",
              "Conductivity",
              "Temperature",
              "Practical_Salinity"]

#######################################################################################
# Global variable to change according your settings
CURRENT_DIR = os.getcwd()
LOCAL_DATA_DIR = os.path.join(CURRENT_DIR, "data")
LOCAL_GPX_DIR = os.path.join(CURRENT_DIR, "gpx")
LOCAL_ALARM_DIR = os.path.join(CURRENT_DIR, "alarm")
OUTPUT_FILE_NAME = os.path.join(CURRENT_DIR, "Total_Measurements.txt")

########################################################################################
#
########################################################################################
class Sftp:
    def __init__(self):
        """Constructor Method"""
        # Set connection object to None (initial value)
        self.connection = None
        self.hostname = "ftp.nke-i.com"
        self.username = "wimo-5a47"
        self.password = "!27TE?2H$6"
        self.port = 22

    def connect(self):
        """Connects to the sftp server and returns the sftp connection object"""
        try:
            # Get the sftp connection object
            self.connection = pysftp.Connection(
                host=self.hostname,
                username=self.username,
                password=self.password,
                port=self.port,
            )
        except Exception as err:
            raise Exception(err)
        finally:
            print(f"Connected to {self.hostname} as {self.username}.")

    def disconnect(self):
        """Closes the sftp connection"""
        self.connection.close()
        print(f"Disconnected from host {self.hostname}")

    def listdir(self, remote_path):
        """lists all the files and directories in the specified path and returns them"""
        for obj in self.connection.listdir(remote_path):
            yield obj

    def listdir_attr(self, remote_path):
        """lists all the files and directories (with their attributes) in the specified path and returns them"""
        for attr in self.connection.listdir_attr(remote_path):
            yield attr

    def download(self, remote_file, target_local_path):
        try:
            print(
                f"downloading from {self.hostname} as {self.username} [(remote path : {remote_file});(local path: {target_local_path})]"
            )

            # Create the target directory if it does not exist
            if not os.path.isdir(target_local_path):
                try:
                    os.makedirs(target_local_path)
                except Exception as err:
                    raise Exception(err)

            # Download from remote sftp server to local
            self.connection.get(remote_file, os.path.join(target_local_path,remote_file))
            print("download completed")

        except Exception as err:
            raise Exception(err)

########################################################################################
#
########################################################################################
class Measure():
    def __init__(self, parent=None):
        # Variables
        self._ldata = []
        self._datetime = ""

    def SetDateTime(self, strstr):
        if len(strstr) >= 12:
            self._datetime = dt.datetime(int(strstr[0:4]), int(strstr[5:7]), int(strstr[8:10]), int(strstr[11:13]),
                                         int(strstr[14:16]), int(strstr[17:19]))
            return True
        return False

    def GetDateTime(self):
        return self._datetime

    def GetDate(self):
        return self._datetime.date()

    def GetTime(self):
        return self._datetime.time()

    def SetDataList(self, strstr):
        if len(strstr) > 0:
            self._ldata = strstr.split(",")[1:]
            return True
        return False

    def GetDataList(self):
        return self._ldata

#####################################################################################
# Class de gestion d'affichage des graphes SAMBAT
#####################################################################################
class PlotNKE():
    def __init__(self, _dFileName, _dSepChar, parent=None):
        self.initDate = 0
        self.lastDate = 0
        self.xdata = []
        self.dFileName = _dFileName
        self.dSepChar = _dSepChar
        self.nGraphs = 10  # Nombre de graphics
        self.tideChbg = None
        return

    def plotGraphics(self):
        # Load the data set
        self.getData()
        fig, axes = plt.subplots(nrows=self.nGraphs,ncols=1,sharex=True)
        colors = ["black","red", "green","brown","blue","yellow","black","red","green","brown","blue"]

        fig.subplots_adjust(hspace=0.9,top=0.95,bottom=0.1,left=0.1,right=0.95,wspace=0.1)
        for i in range(self.nGraphs):
           axes[i].plot_date(self.xdata, self.ydata[:,i],ls='solid',marker="None",fmt=colors[i],xdate=True)
           axes[i].set_title(SENSORNAME[i])
           # format the ticks
           axes[i].xaxis.set_major_locator(months)
           axes[i].xaxis.set_major_formatter(daysFmt)
           axes[i].format_xdata = daysFmt
           axes[i].xaxis.set_minor_locator(hours)
           axes[i].xaxis.set_minor_formatter(hoursFmt)
           axes[i].set_xlim(min(self.xdata), max(self.xdata))
           axes[i].grid(True)
           axes[i].xaxis_date()

        # rotates and right aligns the x labels, and moves the bottom of the
        # axes up to make room for them
        fig.autofmt_xdate()
        plt.show()

    def getData(self):
        try:
          with open(self.dFileName): pass
        except IOError:
          print(f"File {self.dFileName} cannot be read")
          return

        with open(self.dFileName,'r', errors='ignore') as dataFile:
            lcontent = dataFile.readlines()  # Open and read the entire file

        # It is considering the first line containts names of variables and the number of fields
        # of this line correspond to the number of graphs to draw
        self.nGraphs = len(lcontent[0].rstrip('\n').split(self.dSepChar))-2

        firstpass = True
        for lline in lcontent[1:]:   # Loop over data lines
          lineData = lline.rstrip('\n').split(self.dSepChar)
          theData = [float(i) for i in lineData[2:]]
          currentDateTime = np.datetime64(lineData[0]+'T'+lineData[1]+'.00Z')
          if firstpass:
              self.xdata = currentDateTime
              self.initDate = self.xdata
              self.ydata = np.array(np.asarray(theData)) # fill the array
              firstpass=False
          else:
              self.xdata = np.append(self.xdata, currentDateTime)
              self.ydata = np.append(self.ydata,np.asarray(theData)) # fill the array array

        self.lastDate = self.xdata[len(self.xdata)-1]

        self.xdata = pd.to_datetime(self.xdata)
        self.ydata.resize(len(self.xdata), self.nGraphs)
        return


########################################################################################
#
########################################################################################
class pyNKE:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pyNKE_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&NKE sensor')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('pyNKE', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/nke_sensor/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Manage NKE sensor data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&NKE sensor'),
                action)
            self.iface.removeToolBarIcon(action)

    def get_files_by_date(directory):
        os.chdir(directory)
        files = [(os.stat(fname)[ST_CTIME], fname) for fname in os.listdir(directory) if os.path.isfile(fname)]
        files.sort()
        return [f for s,f in files]

    def str2datetime(a):
      a = dt.datetime.strptime(a, '%Y-%m-%d %H:%M:%S')
      return(a)

    def GetFiles():
        # Create SFTP object
        sftp = Sftp()
        # Connect to SFTP
        sftp.connect()
        # Lists files with attributes of SFTP
        remote_path = "./"
        list_of_remote_files = [f for f in sftp.listdir(remote_path)]
        downloaded_data_files = 0
        present_data_files = 0
        # Download files from SFTP
        for f in list_of_remote_files:
            if "5a47_data" in os.path.basename(f):
                if not os.path.isfile(os.path.join(LOCAL_DATA_DIR,f)):
                    sftp.download(f, LOCAL_DATA_DIR)
                    downloaded_data_files += 1
                else:
                    present_data_files += 1
            elif "5a47_gps" in os.path.basename(f):
                if not os.path.isfile(os.path.join(LOCAL_GPX_DIR,f)):
                    sftp.download(f, LOCAL_GPX_DIR)
                    downloaded_data_files += 1
                else:
                    present_data_files += 1
            elif "5a47_alarm" in os.path.basename(f):
                if not os.path.isfile(os.path.join(LOCAL_ALARM_DIR,f)):
                    sftp.download(f, LOCAL_ALARM_DIR)
                    downloaded_data_files += 1
                else:
                    present_data_files += 1
            else:
                printf(f"File {f} is not managed")
        # Disconnect from SFTP
        sftp.disconnect()
        return downloaded_data_files, present_data_files

    # Create and fill the result file
    def ConcatData():
        try:
            resDataFile = open(OUTPUT_FILE_NAME,'w')  # Default file name (see at the top)
        except:
            return False
        sepChar = '\t'
        strHeader = "Date"+sepChar+"Heure"+sepChar
        for i in range(len(SENSORNAME)-1):
            strHeader += SENSORNAME[i] + sepChar
        strHeader += SENSORNAME[len(SENSORNAME)-1] + '\n'
        resDataFile.write(strHeader)  # Write field names

        M = Measure()
        # Loop over the data files located in the data folder
        for lfile in get_files_by_date(LOCAL_DATA_DIR):
            fname = lfile.split(".")[0]
            startdatetime = "{}-{}-{}".format(2000+int(fname.split("_")[2][0:2]),
                                                        fname.split("_")[2][2:4],
                                                        fname.split("_")[2][4:6])
            with open(lfile,'r', errors='ignore') as f:
                lcontent = f.readlines()  # Open the file and read it

            for lline in lcontent:   # Loop over lines
                lline.rstrip('\n')
                if len(lline) <= 2:  # Do nothing if line too short
                    continue
                if not lline.startswith(startdatetime): # Skip header lines
                    continue
                if M.SetDateTime(lline.split(",")[0]):  # extraction of the date
                    resDataFile.write(str(M.GetDate())+sepChar+str(M.GetTime())+sepChar)  # Write data and time

                if M.SetDataList(lline):  # extraction of values from the line
                    ldata = len(M.GetDataList())
                    for i in range(ldata-1):  # Lopp over values
                      resDataFile.write(str(M.GetDataList()[i]) + sepChar)  # write n-1 values
                    resDataFile.write(str(M.GetDataList()[ldata-1]))  # Write the last value
        # Close file
        resDataFile.close()
        return True


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = pyNKEDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            downloaded, present = self.GetFiles()
            print(f"{downloaded} new data files downloaded")
            print(f"{present} files ignored (still present)")
            ConcatData()
            pltNKE = PlotNKE(OUTPUT_FILE_NAME, '\t')
            pltNKE.plotGraphics()
            pass
